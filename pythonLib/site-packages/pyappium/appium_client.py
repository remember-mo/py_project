# -*- coding: utf-8 -*-
# Copyright 2016 Weidian.com, Inc. or its affiliates. All Rights Reserved.
# This software is the confidential and proprietary information of
# Koudai Corporation ("Confidential Information"). You
# shall not disclose such Confidential Information and shall use
# it only in accordance with the terms of the license agreement
# you entered into with Koudai.
# !/usr/bin/env python
# __author__ = 'hongkefeng'
import os
from time import sleep
from appium import webdriver

from pyappium.config import Platform, TaskConfig
from pyappium.zeus_params import AppiumParams
from pyappium.log import SimpleLog


class AppiumClient:
    desired_caps = {}

    def __init__(self, test_app, platform):
        self.test_app = test_app
        self.log = SimpleLog()
        self.appium_driver = None

        if platform.lower() == Platform.Android.lower():
            self.desired_caps = self.init_android_appium_params()

        if platform.lower() == Platform.IOS.lower():
            self.desired_caps = self.init_ios_appium_params()

        self.log.info("PlatformName: " + platform.lower())
        self.log.info(str(self.desired_caps))

    def start(self):
        try:
            self.log.info("Connecting to Appium Server")
            appium_server_url = "http://{server}:{port}/wd/hub".format(
                    server="127.0.0.1", port=AppiumParams.APPIUM_PORT
            )

            self.appium_driver = webdriver.Remote(appium_server_url, self.desired_caps)
            self.appium_driver.implicitly_wait(TaskConfig.Appium_Wait_Element_Time)
            self.log.info("Connected to Appium Server Success")
            sleep(10)
            return self.appium_driver
        except Exception as e:
            self.log.critical("Connect to Appium Server Failed: ")
            print(e)
            self.log.critical("Exit ----->")
            exit(-1)

    def init_android_appium_params(self):
        desired_caps = {
            "platformName": "Android",
            "unicodeKeyboard": False,
            "deviceName": self.test_app.device_name,
            "udid": self.test_app.device_name,
            "appPackage": self.test_app.package,
            "appActivity": self.test_app.activity,
            "newCommandTimeout": 600,
            "noReset": True,
            "dontStopAppOnReset": False,
        }

        if TaskConfig.EnableAndroidUIAutomator2:
            desired_caps["automationName"] = "UIAutomator2"
            desired_caps["systemPort"] = AppiumParams.UIAUTOMATOR2PORT
        else:
            desired_caps["automationName"] = "appium"

        return desired_caps

    def init_ios_appium_params(self):
        desired_caps = {
            "platformName": "iOS",
            "deviceName": "iPhone",
            "udid": self.test_app.device_name,
            "bundleId": self.test_app.package,
            "automationName": "XCUITest",
            "noReset": "True",
            "newCommandTimeout": 360,
            "preventWDAAttachments": True,
            "autoWebviewTimeout": 15000,
            "dontStopAppOnReset": "True",

        }

        if os.getenv("WDAPORT"):
            desired_caps["webDriverAgentUrl"] = "http://127.0.0.1:{wdaport}".format(
                    wdaport=AppiumParams.WDAPORT
            )
            desired_caps["useNewWDA"] = False

        else:
            desired_caps["wdaLocalPort"] = 7100
            desired_caps["useNewWDA"] = True

        return desired_caps
