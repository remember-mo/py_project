# -*- coding: utf-8 -*-
# !/usr/bin/env python
# __author__ = 'hongkefeng'


from time import sleep
from pyappium.config import *
from pyappium.adb import ADB, AndroidKeyCode
from abc import abstractmethod
from pyappium.ios_uihelper import IOSUiHelper
from pyappium.ios_url_service import IOSUrlService
from pyappium.android_uihelper import AndroidUiHelper, Activity
from pyappium.utils import *


class EngineFactory:
    platform = ""
    driver = ""

    def __init__(self, driver):
        self.driver = driver
        self.platform = self.driver.capabilities["platformName"]

    def create(self):
        if self.platform == Platform.Android:
            return AndroidEngine(self.driver)

        if self.platform == Platform.IOS:
            return IOSEngine(self.driver)

        return CUITestException("Error", "Not support platform")


class Engine(object):
    def __init__(self, driver):
        self.driver = driver
        self.device_id = self.driver.capabilities["udid"]
        self.platform = self.driver.capabilities["platformName"]

    def auto_screenshot(self, image_dir, image_name=""):
        return auto_screenshot(
                self.driver,
                os.path.join(TaskConfig.Images_Dir, image_dir),
                image_name
        )

    @abstractmethod
    def before(self):
        pass

    @abstractmethod
    def click(self, el_text, image=""):
        pass

    @abstractmethod
    def goto(self, url):
        pass

    @abstractmethod
    def swipe_up(self, distance):
        pass

    @abstractmethod
    def swipe_down(self, distance):
        pass

    @abstractmethod
    def swipe_left(self):
        pass

    @abstractmethod
    def swipe_right(self):
        pass

    @abstractmethod
    def verify_not_exist(self, el_text):
        pass

    @abstractmethod
    def verify_exist(self, el_text):
        pass

    @abstractmethod
    def iclick(self, els, image_dir):
        pass

    @abstractmethod
    def draw_element(self, image, el_text):
        pass

    @abstractmethod
    def info_of(self, text):
        pass

    def restart_app(self):
        self.driver.close_app()
        sleep(5)
        self.driver.launch_app()

    @abstractmethod
    def handle_popup_window(self):
        pass

    @abstractmethod
    def press_back(self):
        pass

    def get_source(self):
        try:
            return self.page_source()
        except TimeoutError as e:
            return self.page_source()

    @timeout(10, "get page source timeout")
    def page_source(self):
        return self.driver.page_source.encode("utf-8")

    @abstractmethod
    def enum_page_elements(self):
        pass

    @abstractmethod
    def get_current_window(self):
        pass


class CUITestException(Exception):
    def __init__(self, message, status):
        self.message = message
        self.status = status


class AndroidEngine(Engine):

    def __init__(self, driver):
        super(AndroidEngine, self).__init__(driver)
        self.adb = ADB(self.device_id)
        self.uihelper = AndroidUiHelper(self.driver)
        self.activity = Activity(self.driver)
        self.adb.enable_ime()
        self.adb.enable_wifi()

    def before(self):
        pass

    def get_current_window(self):
        return self.adb.current_window

    def info_of(self, text):
        return self.uihelper.find_element_once(text)

    def press_back(self):
        self.adb.send_key_event(AndroidKeyCode.BACK)

    def enum_page_elements(self):
        return self.activity.enum_all_valid_elements()

    def click(self, el_text, image=""):
        # self.uihelper.find_element(el_text).click()
        el = self.activity.find_element_ex(el_text)

        if not el:
            self.handle_popup_window()
            el = self.activity.find_element_ex(el_text)

        if not el:
            raise CUITestException("无法找到对象：" + el_text, "寻找对象失败")

        if image:
            self.draw_element(image, el_text)
        el.click(self.adb)

    def goto(self, url):
        self.adb.entry_url(url)

    def input(self, el_text, input_text):
        el = self.uihelper.find_element(el_text)
        if not el: raise CUITestException("输入错误:" + el_text, "")
        el.clear()
        self.adb.send_text(input_text)

    def handle_popup_window(self):
        sleep(2)
        return self.uihelper.popup_window_detect()

    def draw_element(self, image, el_text):
        el = self.activity.find_element_ex(el_text)

        if not el:
            self.handle_popup_window()
            el = self.activity.find_element_ex(el_text)

        if el:
            draw_rectangle(
                    image,
                    (el.center[0], el.center[1]),
                    (el.center[2], el.center[3]),
                    new_file=False,
                    color=True,
            )

    def verify_exist(self, el_text):
        if el_text.__contains__("id"):
            return self.uihelper.find_element_once(el_text)

        if el_text.startswith("/"):
            return self.uihelper.find_element_once(el_text)

        if el_text in self.get_source().decode("utf-8"):
            return True

        return self.uihelper.find_element_once(el_text)

    def verify_not_exist(self, el_text):
        return self.uihelper.find_element_once(el_text)

    def swipe_up(self, distance):
        self.adb.swipe_up(distance)

    def swipe_down(self, distance):
        self.adb.swipe_down(distance)

    def swipe_left(self):
        self.adb.swipe_left()

    def swipe_right(self):
        self.adb.swipe_right()

    def iclick(self, els, image_dir):
        images = []
        for el_text in els:
            if self.platform == Platform.Android and not el_text.startswith("/"):
                if self.activity.find_element_ex(el_text):
                    image = self.auto_screenshot(image_dir)
                    self.draw_element(image, el_text)
                    images.append(image)
                    self.activity.click(el_text, self.adb)
            else:
                el = self.uihelper.find_element_once(el_text)
                if el:
                    image = self.auto_screenshot(image_dir)
                    self.draw_element(image, el_text)
                    images.append(image)
                    el.click()
        return images


class IOSEngine(Engine):
    def __init__(self, driver):
        super(IOSEngine, self).__init__(driver)
        self.device_info = self.load_ios_device_info()

        if "plus" in self.device_info[self.device_id]["name"].lower():
            self.plus = True
        else:
            self.plus = False

        self.url_service = IOSUrlService(
                ip=self.device_info[self.device_id]["ip"],
                app=self.driver.capabilities["bundleId"],
        )

        self.uihelper = IOSUiHelper(self.driver, self.url_service)

    def get_current_window(self):
        return self.url_service.get_current_window()

    def enum_page_elements(self):
        return self.uihelper.get_all_elements_info()

    def before(self):
        pass

    def info_of(self, text):
        return self.uihelper.find_element_once(text)

    def press_back(self):
        pass

    @staticmethod
    def load_ios_device_info():
        return requests.session().get(TaskConfig.IOS_Device_Info).json()

    def click(self, el_text, image=""):
        if image:
            self.draw_element(image, el_text)
        el = self.uihelper.find_element(el_text)
        if not el:
            self.handle_popup_window()

        el = self.uihelper.find_element(el_text)
        if el:
            el.click()

    def input(self, el_text, input_text):
        el = self.uihelper.find_element(el_text)
        if not el:
            self.handle_popup_window()
            el = self.uihelper.find_element(el_text)
        if el:
            el.clear()
            el.send_keys(input_text)

    def goto(self, url):
        self.url_service.jump_to_activity(url)

    def swipe_up(self, distance):
        self.uihelper.swipe_up()

    def swipe_down(self, distance):
        self.uihelper.swipe_down()

    def swipe_left(self):
        self.uihelper.swipe_left()

    def swipe_right(self):
        self.uihelper.swipe_right()

    def verify_exist(self, el_text):
        if el_text.startswith("**") and el_text in self.get_source().decode("utf-8"):
            return True
        if el_text.startswith("/"):
            return self.uihelper.find_element_once(el_text)

        return self.uihelper.find_element_once(el_text)

    def verify_not_exist(self, el_text):
        if el_text in self.get_source().decode("utf-8"):
            return True

        if self.uihelper.find_element_once(el_text):
            return False
        else:
            return True

    def iclick(self, els, image_dir):
        source = self.get_source().decode("utf-8")
        images = []
        for el in els:
            image = self.auto_screenshot(image_dir)

            if el.startswith("/"):
                images.append(image)
                self.draw_element(image, el)
                self.uihelper.if_click(el)
                continue

            if el in source:
                images.append(image)
                self.draw_element(image, el)
                self.uihelper.if_click(el)
                source = self.get_source().decode("utf-8")

        return images

    def draw_element(self, image, el_text):
        el = self.uihelper.find_element_once(el_text)
        if el:
            ios_draw_rectangle_on_element(image, el, plus=self.plus)

    def handle_popup_window(self):
        self.uihelper.popup_window_detect()
