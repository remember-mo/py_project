# -*- coding: utf-8 -*-
# !/usr/bin/env python
# __author__ = 'hongkefeng'

# Copyright 2000-2017 by Koudai Corporation.
# All rights reserved.

# This software is the confidential and proprietary information of
# Koudai Corporation ("Confidential Information"). You
# shall not disclose such Confidential Information and shall use
# it only in accordance with the terms of the license agreement
# you entered into with Koudai.

import os
import re
from os import listdir
from os.path import isfile
from shutil import copyfile
from time import gmtime, strftime


class Report:
    PARSER = "html.parser"

    def __init__(self, report_dir, report_name):
        self.report_name = report_name
        self.work_dir = os.getcwd()
        self.report_dir = report_dir
        self.image_dir = os.path.join(self.report_dir, "images/")
        self.report_template = os.path.join(self.report_dir, "cloudtestreport.html")
        self.report_file = os.path.join(self.report_dir, report_name + ".html")

        if os.path.exists(self.report_file):
            os.remove(self.report_file)

        if not os.path.exists(self.image_dir):
            os.makedirs(self.image_dir)

        if not os.path.exists(self.report_file):
            if not os.path.exists(self.report_template):
                os.system("wget http://uitest.daily.vdian.net/package/cloudtestreport.html -q")
                os.system(
                    "mv cloudtestreport.html {target}".format(
                        target=self.report_template
                    )
                )
            copyfile(self.report_template, self.report_file)

    def add_device_info(self, device_info):
        env_info = ""
        base_env = "{{ENV}}"

        for k, v in device_info.items():
            env_info += "<tr><td>" + k + "</td>\n <td> " + v + "</td> </tr>"

        file_content = self.get_report_content()
        if base_env in file_content:
            with open(self.report_file, "w") as f:
                f.write(file_content.replace(base_env, env_info))

    def add_summary_info(self, summary_info):
        env_info = ""
        base_env = "{{SUMMARY}}"
        for summary in summary_info:
            env_info += (
                "<tr><td>"
                + summary[0]
                + "</td>\n <td> "
                + summary[1]
                + "</td>  "
                + "</tr>"
            )
        file_content = self.get_report_content()
        if base_env in file_content:
            with open(self.report_file, "w") as f:
                f.write(file_content.replace(base_env, env_info))

    def add_detail_info(self, detail_info):
        env_info = ""
        base_env = "{{REPORT_DETAIL}}"
        for summary in detail_info:
            activity_name, total, passed, failed = summary
            passing_rate = "{0:.0f}%".format(float(passed) / total * 100)
            env_info += (
                "<tr><td>"
                + activity_name
                + '</td>\n <td  align="center"> '
                + str(total)
                + '</td> <td align= "center">'
                + str(passed)
                + ' </td><td align="center">'
                + str(failed)
                + '</td> <td align= "center">'
                + str(passing_rate)
                + "</td>"
                + '<td align="center" ><a target="_blank" href="images/'
                + activity_name
                + '/overview.png"/>概览</td></tr>'
            )

        file_content = self.get_report_content()
        if base_env in file_content:
            with open(self.report_file, "w") as f:
                f.write(file_content.replace(base_env, env_info))

    @staticmethod
    def now():
        return strftime("%Y-%m-%d %H:%M:%S", gmtime())

    def image_to_report(self, image_dir, activity_name):
        images = [
            f
            for f in listdir(image_dir)
            if isfile(os.path.join(image_dir, f)) and "result" in f
        ]
        success_count = 0
        failed_count = 0
        for img in images:
            result_info = img.replace(".png", "").split("_")
            idx, result = result_info[0], result_info[-1]

            if result == "success":
                success_count += 1
                self.add_test_case(
                    "passed",
                    "info",
                    "10.0",
                    "",
                    [
                        "images/{activity_name}/{idx}_click.png".format(
                            activity_name=activity_name, idx=idx
                        ),
                        "images/{activity_name}/{idx}_result_success.png".format(
                            idx=idx, activity_name=activity_name
                        ),
                    ],
                )

            else:
                failed_count += 1
                self.add_test_case(
                    "failed",
                    "info",
                    "10.0",
                    "网络请求错误",
                    [
                        "images/{activity_name}/{idx}_click.png".format(
                            activity_name=activity_name, idx=idx
                        ),
                        "images/{activity_name}/{idx}_result_error.png".format(
                            idx=idx, activity_name=activity_name
                        ),
                    ],
                )
        return len(images), success_count, failed_count

    @staticmethod
    def overview_report(self):
        pass

    def get_report_content(self):
        return open(self.report_file, "r").read()

    def add_test_activity(self, activity_name):
        base_activity_info = """
        <h2>测试用例：{{TESTTILE}}</h2>
        <table id="results-table">
            <thead id="results-table-head">
                <tr>
                    <th class="result initial-sort" col="result" width="40%">测试用例</th>
                    <th col="name" width="20%">Test Result</th>
                    <th col="duration" width="20%">Duration</th>
                </tr>
                <tr hidden="true" id="not-found-message">
                    <th colspan="3">No results found. Try to check the filters</th>
                </tr>
            </thead>
        </table>"""
        file_content = self.get_report_content()

        new_content = file_content.replace("<script>", base_activity_info + "<script>")
        new_content = new_content.replace("{{TESTTILE}}", activity_name)

        with open(self.report_file, "w") as f:
            f.write(new_content)

    def add_test_case(
        self, result, case_name, case_duration, case_log, case_image_list
    ):
        img = "{{image}}"
        s_image = "{{IMGS}}"
        img_name = "{{image_name}}"
        case_name_str = "{{case_name_str}}"
        tc_result = "{{PASS_FAIL}}"
        case_log_str = "{{LOG}}"
        images_tempalte = "{{IMAGES}}"
        duration_str = "{{DURATION}}"
        th_images = "{{Th_IMGS}}"
        base_test_case_info = """
        <tbody class="{{PASS_FAIL}} results-table-row">
            <tr>
                <td class="col-name">{{case_name_str}}</td>
                 <td class="col-result">{{PASS_FAIL}}</td>
                <td class="col-duration">{{DURATION}}</td>
            </tr>
            <tr>
                <td class="extra" colspan="3">
                    <div class="row">
                        <div class="" style="white-space: pre-wrap; width:800px">{{LOG}}</div>
                         {{Th_IMGS}}
                    </div>
                </td>
            </tr>
        </tbody>
    """
        #         image_thumbnail = """
        #     <div class="inline" style="margin-left: 10px"><p>{{image_name}}</p>
        # <a href="./{{image}}" target="_blank">
        #     <img style="margin-left:10px" src="./{{image}}" alt="{{image}}"  height="500px"/></div>
        # </a>
        #     """

        image_thumbnail = """
        <div class="inline" style="margin-left: 10px"><p>图片</p>
            <img style="margin-left:10px" src="./{{image}}" alt="{{image}}"  width="240"/></div>
        </a>
            """

        image_ = ""
        images_str = ""

        sub_images = '<a target=_blank href="./screenShot/{{IMGS}}">{{IMGS}}</a>'

        for image in case_image_list:
            images_str += sub_images.replace(s_image, image)
            image_ += image_thumbnail.replace(img, image).replace(img_name, " ")

        s = base_test_case_info.replace(tc_result, result).replace(
            case_name_str, case_name
        )
        s = s.replace(duration_str, case_duration)
        s = s.replace(case_log_str, case_log)
        s = s.replace(images_tempalte, images_str)
        s = s.replace(th_images, image_)
        file_content = self.get_report_content()

        with open(self.report_file, "w") as f:
            file_content = file_content.replace("{{NOW}}", self.now())
            f.write(file_content.replace("</table><script>", s + "</table><script>"))

    @staticmethod
    def get_case_result(text):
        try:
            result = re.findall(">\s*(错误|通过|失败)<", text)
            return result[0]
        except Exception as e:
            return "Exception"

    @staticmethod
    def get_case_detail(test_case_content):
        details = test_case_content.find_all("pre")
        if details:
            return details[0].text.strip()
        else:
            return "None"


if __name__ == "__main__":
    info = {"操作系统": "Android 7.0.1", "软件版本": "4.0.1"}

    report_dir = os.path.join(os.getcwd(), "src/report")

    report = Report(report_dir, "report")

    report.add_test_activity("fdsaf")
    report.add_test_case(
        "passed", "case_name", "10", "dsafsafdsa", ["images/1.jpg", "images/1.jpg"]
    )

    report.add_test_activity("fdsaf")
    report.add_test_case(
        "passed", "case_name", "10", "fsafs", ["images/1.jpg", "images/1.jpg"]
    )

    report.add_test_activity("fdsaf")
    report.add_test_case(
        "failed", "dddd", "10", "ffff", ["images/1.jpg", "images/1.jpg"]
    )
    report.add_test_case(
        "failed", "ddccccdd", "23", "ffff", ["images/1.jpg", "images/1.jpg"]
    )

    report.add_device_info(info)
