# Copyright 2000-2017 by Koudai Corporation.
# All rights reserved.

# This software is the confidential and proprietary information of
# Koudai Corporation ("Confidential Information"). You
# shall not disclose such Confidential Information and shall use
# it only in accordance with the terms of the license agreement
# you entered into with Koudai.


# !/usr/bin/env python
# -*- coding: utf-8 -*-
# __author__ = 'hongkefeng'

import urllib
import requests
from time import sleep
from pyappium.log import SimpleLog
import urllib.parse


class IOSUrlService:
    """
    Usage:
        Provide a method to jump to iOS App specified activity via url scheme
        such as jump to iOS App shop activity witch shopid=xxx
    """

    def __init__(self, ip, app="", home_url=""):
        """
        Usage: init service

        :param ip:  the target phone ip address
        :home_url: go home url will be entry an App root activity
        :param port: the target phone service port, default is: 18090
        """
        self.ip = ip
        self.app = app
        self.home_url = home_url
        self.log = SimpleLog()
        self.log.info("URL Scheme Service -------->")
        self.log.info("IP:" + ip)
        self.log.info("Home_Url:" + home_url)
        self.log.info("URL Scheme Service <--------")

    def jump_to_activity(self, url):
        """
        jump to a page via url scheme
        :param url: url scheme
        :return: the respond of http requests
        """

        if not url:
            self.log.info("url is blank, return ")
            return False

        sleep(1)
        url = url.replace('"', "")
        full_url = self.get_full_url(url)
        self.log.info("full url: " + full_url)

        resp = None

        try:
            session = requests.session()
            session.keep_alive = False
            resp = session.get(full_url, timeout=5)
        except Exception as e:
            self.log.critical("Entry url failed: " + full_url)
            self.log.critical("Error: " + e.args[0])
            return False
        finally:
            return resp

    def get_full_url(self, url):
        """
        Usage:
            convert a url scheme to http requests url
        :param url: url scheme
        :return:  the full path of requests
        """
        prefix = self.get_prefix_uri()
        url = self.get_encode_url(url)
        port = self.get_url_service_port()

        return "http://{ip}:{port}/{prefix}{url}".format(
                ip=self.ip, port=port, prefix=prefix, url=url
        )

    def get_encode_url(self, url):
        url_prefix = {
            "com.koudai.weidian.qatest": url,
            "com.vdian.minishop.qatest": urllib.parse.quote(url),
            "com.koudai.weidianbuyer.qatest": urllib.parse.quote(url),
        }
        return url_prefix[self.app]

    def get_url_service_port(self):
        port_info = {
            "com.koudai.weidian.qatest": 8888,
            "com.vdian.minishop.qatest": 18888,
            "com.koudai.weidianbuyer.qatest": 18090,
        }
        return port_info[self.app]

    def get_current_window(self):
        """
        Usage:
            convert a url scheme to http requests url
        :param url: url scheme
        :return:  the full path of requests
        """
        prefix = self.get_prefix_uri()
        port = self.get_url_service_port()

        return "http://{ip}:{port}/FListen/getViewControllerName".format(
                ip=self.ip, port=port, prefix=prefix)

    def get_prefix_uri(self):
        url_prefix = {
            "com.koudai.weidian.qatest": "OpenPage?page=page://",
            "com.koudai.weidianbuyer.qatest": "FListen/route?url=",
            "com.vdian.minishop.qatest": "FListen?url=",
        }
        return url_prefix[self.app]

    def go_home(self):
        if self.home_url:
            self.log.info("go to home url scheme")
            self.jump_to_activity(self.home_url)
        else:
            self.log.info("no home url")


if __name__ == "__main__":
    pass
