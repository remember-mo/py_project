# -*- coding: utf-8 -*-
# !/usr/bin/env python
# __author__ = 'hongkefeng'
import datetime
import time
from functools import wraps
import elasticsearch
from pyappium.report import Report


class ES:
    def __init__(self, index, query_str, size, time_range="now-1m"):
        self.servers = ["http://10.2.113.93:8080", "http://10.2.113.94:8080"]
        self.time_range = time_range
        self.index = index
        self.size = size

        self.__query_str = {
            "size": size,
            "query": {
                "filtered": {
                    "query": {"query_string": {"query": query_str}},
                    "filter": {"range": {"@timestamp": {"gt": self.time_range}}},
                }
            },
            "sort": [{"@timestamp": {"order": "desc"}}],
        }
        self.client = elasticsearch.Elasticsearch(self.servers)

    def query(self, index, query_str, size=50, time_range="now-15m"):
        __query_str = {
            "size": size,
            "query": {
                "filtered": {
                    "query": {"query_string": {"query": query_str}},
                    "filter": {"range": {"@timestamp": {"gt": time_range}}},
                }
            },
            "sort": [{"@timestamp": {"order": "desc"}}],
        }

        res = self.client.search(index=index, body=__query_str)
        return res["hits"]["hits"]

    def query_ut(self):
        uts = []
        res = self.client.search(index=self.index, body=self.__query_str)
        for i in res["hits"]["hits"]:
            source = i["_source"]
            fields = str(i["sort"][0])[:-3]

            ut = UT(
                    page=source.get("page", "").strip(),
                    args=source.get("args", "").strip(),
                    arg1=source.get("arg1", "").strip(),
                    timestamp=datetime.datetime.fromtimestamp(int(fields)).isoformat(),
            )
            uts.append(ut)
        return uts


class UT:
    def __init__(self, page, args, arg1, timestamp):
        self.page = page
        self.args = args
        self.arg1 = arg1
        self.timestamp = timestamp

    @staticmethod
    def loads(uts):
        return [
            UT(
                    page=ut.get("page", ""),
                    arg1=ut.get("arg1", ""),
                    args=ut.get("args", ""),
                    timestamp=ut.get("timestamp", ""),
            )
            for ut in uts
        ]

    def __repr__(self):
        return str(
                {
                    "page": self.page,
                    "args": self.args,
                    "arg1": self.arg1,
                    "timestamp": self.timestamp,
                }
        )

    def __eq__(self, other):
        return self.arg1 == other.arg1 and self.page == self.page

    @property
    def header(self):
        return "_".join([self.page, self.arg1])

    def compare(self, ut1, ut2):
        pass


class UTCheck(object):
    @staticmethod
    def base_check(expects, results, description, report: Report):
        total_result = []
        results_headers = [res.header for res in results]
        results_args = [res.args for res in results]
        expects_ut = UT.loads(expects)

        for ex in expects_ut:
            if ex.header not in results_headers:
                total_result.append([False, ex.header, "null"])
                continue

            result_content = results_args[results_headers.index(ex.header)]
            args_content = ex.args.split(",")

            for arg in args_content:
                arg_key = arg.split("=")[0]
                if arg_key in result_content:
                    continue
                else:
                    total_result.append([False, ex, result_content])
                    break
            else:
                total_result.append([True, ex, result_content])

        for r in total_result:
            print(r)

        event_check_result = all([result[0] for result in total_result])
        expects_str = [str(i) + "<br>" for i in expects]
        results_str = [str(i) + "<br>" for i in results]

        event_check_log = """
        ES最近20条埋点记录 : \n{es_log}\n<hr>\n期待结果:\n{expect_result}
        """.format(
                es_log=results_str, expect_result=str(expects_str)
        )
        if event_check_result:
            report.add_test_case("passed", description, "0.0", event_check_log, [])
        else:
            report.add_test_case("failed", description, "0.0", event_check_log, [])


def event_tracking_check(event_check_func):
    def decorate(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            retval = func(*args, **kwargs)
            time.sleep(5)
            print("----------------------------------")
            event_check_func()
            print("----------------------------------")
            return retval

        return wrapper

    return decorate
